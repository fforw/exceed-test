/**
 * This class is generated by jOOQ
 */
package de.quinscape.exceedapp.domain.tables;


import de.quinscape.exceedapp.domain.Keys;
import de.quinscape.exceedapp.domain.Shipping;
import de.quinscape.exceedapp.domain.tables.records.AddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

	private static final long serialVersionUID = -1611382882;

	/**
	 * The reference instance of <code>shipping.address</code>
	 */
	public static final Address ADDRESS = new Address();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AddressRecord> getRecordType() {
		return AddressRecord.class;
	}

	/**
	 * The column <code>shipping.address.id</code>.
	 */
	public final TableField<AddressRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>shipping.address.recipient</code>.
	 */
	public final TableField<AddressRecord, String> RECIPIENT = createField("recipient", org.jooq.impl.SQLDataType.VARCHAR.length(120).nullable(false), this, "");

	/**
	 * The column <code>shipping.address.address_line</code>.
	 */
	public final TableField<AddressRecord, String> ADDRESS_LINE = createField("address_line", org.jooq.impl.SQLDataType.VARCHAR.length(120).nullable(false), this, "");

	/**
	 * The column <code>shipping.address.address_extra</code>.
	 */
	public final TableField<AddressRecord, String> ADDRESS_EXTRA = createField("address_extra", org.jooq.impl.SQLDataType.VARCHAR.length(120), this, "");

	/**
	 * The column <code>shipping.address.postal</code>.
	 */
	public final TableField<AddressRecord, String> POSTAL = createField("postal", org.jooq.impl.SQLDataType.VARCHAR.length(120).nullable(false), this, "");

	/**
	 * The column <code>shipping.address.country</code>.
	 */
	public final TableField<AddressRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(120).nullable(false), this, "");

	/**
	 * Create a <code>shipping.address</code> table reference
	 */
	public Address() {
		this("address", null);
	}

	/**
	 * Create an aliased <code>shipping.address</code> table reference
	 */
	public Address(String alias) {
		this(alias, ADDRESS);
	}

	private Address(String alias, Table<AddressRecord> aliased) {
		this(alias, aliased, null);
	}

	private Address(String alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
		super(alias, Shipping.SHIPPING, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AddressRecord> getPrimaryKey() {
		return Keys.PK_ADDRESS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AddressRecord>> getKeys() {
		return Arrays.<UniqueKey<AddressRecord>>asList(Keys.PK_ADDRESS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Address as(String alias) {
		return new Address(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Address rename(String name) {
		return new Address(name, null);
	}
}
